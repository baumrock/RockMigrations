{
  // namespace
  "ns": {
    "prefix": "ns",
    "body": ["<?php namespace $1;", "$0"]
  },

  // info
  "info": {
    "prefix": "info",
    "body": [
      "/**",
      " * @author Bernhard Baumrock, $CURRENT_DATE.$CURRENT_MONTH.$CURRENT_YEAR",
      " * @license Licensed under MIT",
      " * @link https://www.baumrock.com",
      " */"
    ]
  },

  // processwire namespace
  "pw": {
    "prefix": "pw",
    "body": ["<?php namespace ProcessWire;", "$0"]
  },

  // load a pw module
  "pw-getmodule": {
    "prefix": "pw-getmodule",
    "body": [
      "/** @var $1 $$2 */",
      "$$2 = \\$this->wire->modules->get('$1');",
      "$$2$0"
    ]
  },
  "pw-module": {
    "prefix": "pw-createmodule",
    "body": [
      "${0:// info snippet}",
      "class ${1:Classname} extends WireData implements Module, ConfigurableModule {",
      "",
      "  public static function getModuleInfo() {",
      "    return [",
      "      'title' => '${1:Classname}',",
      "      'version' => '0.0.1',",
      "      'summary' => '${3:Your module description}',",
      "      'autoload' => ${4:true},",
      "      'singular' => ${5:true},",
      "      'icon' => '${6:smile-o}',",
      "      'requires' => [],",
      "      'installs' => [],",
      "    ];",
      "  }",
      "",
      "  public function init() {",
      "  }",
      "",
      "  /**",
      "  * Config inputfields",
      "  * @param InputfieldWrapper \\$inputfields",
      "  */",
      "  public function getModuleConfigInputfields(\\$inputfields) {",
      "    return \\$inputfields;",
      "  }",
      "",
      "}"
    ],
    "description": "Module Boilerplate"
  },
  "pw-textformatter": {
    "prefix": "pw-textformatter",
    "body": [
      "${2:// info snippet}",
      "class Textformatter${1:Demo} extends Textformatter {",
      "  public static function getModuleInfo() {",
      "    return [",
      "      'title' => '${1:Demo}',",
      "      'version' => '1.0.0',",
      "      'summary' => 'Demo Textformatter',",
      "    ]; ",
      "  }",
      "",
      "  public function format(&\\$str) {",
      "    ${0:\\$str = 'Demo Formatted: '.\\$str;}",
      "  }",
      "",
      "}",
      ""
    ]
  },
  "pw-exception": {
    "prefix": "pw-exception",
    "body": ["throw new WireException(\"$1\")"]
  },
  "pw-404exception": {
    "prefix": "pw-404exception",
    "body": ["throw new Wire404Exception(\"$1\")"]
  },

  // tracy debugger config
  "tracy-config": {
    "prefix": "tracy-config",
    "body": [
      "// tracy config for ddev development",
      "\\$config->tracy = [",
      "  'outputMode' => 'development',",
      "  'guestForceDevelopmentLocal' => true,",
      "  // 'forceIsLocal' => true, // use this only on local dev!!!!",
      "  'localRootPath' => '/path/to/your/project/', // with trailing slash!",
      "  'numLogEntries' => 100, // for RockMigrations",
      "];"
    ]
  },

  // this is a placeholder so that all items above can have a trailing slash
  "": { "body": "" }
}
