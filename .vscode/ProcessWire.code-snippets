{
  // namespace
  "ns": {
    "prefix": "ns",
    "body": ["<?php namespace $1;", "$0"]
  },

  // info
  "info": {
    "prefix": "info",
    "body": [
      "/**",
      " * @author Bernhard Baumrock, $CURRENT_DATE.$CURRENT_MONTH.$CURRENT_YEAR",
      " * @license Licensed under MIT",
      " * @link https://www.baumrock.com",
      " */"
    ]
  },

  // processwire namespace
  "pw": {
    "prefix": "pw",
    "body": ["<?php namespace ProcessWire;", "$0"]
  },

  // load a pw module
  "pw-getmodule": {
    "prefix": "pw-getmodule",
    "body": [
      "/** @var $1 $$2 */",
      "$$2 = \\$this->wire->modules->get('$1');",
      "$$2$0"
    ]
  },
  "pw-module": {
    "prefix": "pw-createmodule",
    "body": [
      "${0:// info snippet}",
      "class ${1:Classname} extends WireData implements Module, ConfigurableModule {",
      "",
      "  public static function getModuleInfo() {",
      "    return [",
      "      'title' => '${1:Classname}',",
      "      'version' => '0.0.1',",
      "      'summary' => '${3:Your module description}',",
      "      'autoload' => ${4:true},",
      "      'singular' => ${5:true},",
      "      'icon' => '${6:smile-o}',",
      "      'requires' => [],",
      "      'installs' => [],",
      "    ];",
      "  }",
      "",
      "  public function init() {",
      "  }",
      "",
      "  /**",
      "  * Config inputfields",
      "  * @param InputfieldWrapper \\$inputfields",
      "  */",
      "  public function getModuleConfigInputfields(\\$inputfields) {",
      "    return \\$inputfields;",
      "  }",
      "",
      "}"
    ],
    "description": "Module Boilerplate"
  },
  "pw-processmodule": {
    "prefix": "pw-processmodule",
    "body": [
      "${0:// info snippet}",
      "class Process$1 extends Process {",
      "  public static function getModuleInfo() {",
      "    return [",
      "      'title' => '$2',",
      "      'version' => '${3:0.0.1}',",
      "      'summary' => '$4',",
      "      'icon' => '$5',",
      "      'requires' => [],",
      "      'installs' => [],",
      "      ",
      "      ",
      "      // name of permission required of users to execute this Process (optional)",
      "      'permission' => 'foo',",
      "      // permissions that you want automatically installed/uninstalled with this module (name => description)",
      "      'permissions' => ['foo' => 'May run the foo module'],",
      "      ",
      "      // page that you want created to execute this module",
      "      'page' => [",
      "        'name' => 'helloworld',",
      "        'parent' => 'setup', ",
      "        'title' => 'Hello World'",
      "      ],",
      "",
      "      // optional extra navigation that appears in admin",
      "      // if you change this, you'll need to a Modules > Refresh to see changes",
      "      'nav' => [",
      "        [",
      "          'url' => '', ",
      "          'label' => 'Hello', ",
      "          'icon' => 'smile-o', ",
      "        ],[",
      "          'url' => 'something/', ",
      "          'label' => 'Something', ",
      "          'icon' => 'beer', ",
      "        ],",
      "      ]",
      "    ];",
      "  }",
      "",
      "  public function init() {",
      "    parent::init(); // always remember to call the parent init",
      "  }",
      "",
      "  // pwexecuteFoo",
      "}"
    ]
  },
  "pw-inputfield": {
    "prefix": "pw-inputfield",
    "body": [
      "${0:// info snippet}",
      "class Inputfield${1:Foo} extends Inputfield${2:Textarea} {",
      "",
      "  public static function getModuleInfo() {",
      "    return [",
      "      'title' => '${1:Foo} Inputfield',",
      "      'version' => '0.0.1',",
      "      'summary' => '${4:Your module description}',",
      "      'icon' => '${5:smile-o}',",
      "      'requires' => [],",
      "      'installs' => [],",
      "    ];",
      "  }",
      "",
      "  /**",
      "  * Render the Inputfield",
      "  * @return string",
      "  */",
      "  public function ___render() {",
      "    return 'Inputfield RENDER';",
      "  }",
      "",
      "  /**",
      "  * Process the Inputfield's input",
      "  * @return \\$this",
      "  */",
      "  public function ___processInput(\\$input) {",
      "    \\$this->message('process input!');",
      "    return false;",
      "  }",
      "",
      "}"
    ],
    "description": "Inputfield Module Boilerplate"
  },
  "pw-fieldtype": {
    "prefix": "pw-fieldtype",
    "body": [
      "${0:// info snippet}",
      "class Fieldtype${1:Classname} extends Fieldtype${2:TextLanguage} {",
      "",
      "  public static function getModuleInfo() {",
      "    return [",
      "      'title' => '${1:Classname}',",
      "      'version' => '0.0.1',",
      "      'summary' => '${4:Your module description}',",
      "      'icon' => '${5:smile-o}',",
      "      'requires' => [],",
      "      'installs' => [],",
      "    ];",
      "  }",
      "",
      "  public function init() {",
      "    parent::init();",
      "  }",
      "",
      "  /** FIELDTYPE METHODS */",
      "",
      "    /**",
      "    * Sanitize value for storage",
      "    * ",
      "    * @param Page \\$page",
      "    * @param Field \\$field",
      "    * @param string \\$value",
      "    * @return string",
      "    */",
      "    public function sanitizeValue(Page \\$page, Field \\$field, \\$value) {",
      "      return \\$value;",
      "    }",
      "",
      "  /** HELPER METHODS */",
      "}"
    ],
    "description": "Fieldtype Module Boilerplate"
  },
  "pw-process-execute": {
    "prefix": "pw-process-execute",
    "body": [
      "/**",
      " * $0",
      " */",
      "public function execute$1() {",
      "  \\$this->headline('$2');",
      "  \\$this->browserTitle('$2');",
      "  /** @var InputfieldForm \\$form */",
      "  \\$form = \\$this->wire->modules->get('InputfieldForm');",
      "  ",
      "  \\$form->add([",
      "    'type' => 'markup',",
      "    'label' => 'foo',",
      "    'value' => 'bar',",
      "  ]);",
      "  ",
      "  return \\$form->render();",
      "}"
    ],
    "description": "ProcessModule Execute Method Boilerplate"
  },
  "pw-textformatter": {
    "prefix": "pw-textformatter",
    "body": [
      "${2:// info snippet}",
      "class Textformatter${1:Demo} extends Textformatter {",
      "  public static function getModuleInfo() {",
      "    return [",
      "      'title' => '${1:Demo}',",
      "      'version' => '1.0.0',",
      "      'summary' => 'Demo Textformatter',",
      "    ]; ",
      "  }",
      "",
      "  public function format(&\\$str) {",
      "    ${0:\\$str = 'Demo Formatted: '.\\$str;}",
      "  }",
      "",
      "}",
      ""
    ]
  },
  "pw-exception": {
    "prefix": "pw-exception",
    "body": ["throw new WireException(\"$1\")"]
  },
  "pw-404exception": {
    "prefix": "pw-404exception",
    "body": ["throw new Wire404Exception(\"$1\")"]
  },

  // tracy debugger config
  "tracy-config": {
    "prefix": "tracy-config",
    "body": [
      "// tracy config for ddev development",
      "\\$config->tracy = [",
      "  'outputMode' => 'development',",
      "  'guestForceDevelopmentLocal' => true,",
      "  // 'forceIsLocal' => true, // use this only on local dev!!!!",
      "  'localRootPath' => '/path/to/your/project/', // with trailing slash!",
      "  'numLogEntries' => 100, // for RockMigrations",
      "];"
    ]
  },

  // rockshell config
  "rockshell-config": {
    "prefix": "rockshell-config",
    "body": [
      "// rockshell config",
      "\\$config->rockshell = [",
      "  'remotes' => [",
      "    'staging' => [",
      "      'ssh' => 'user@host.com',",
      "      'dir' => '/path/to/webroot/current',",
      "    ],",
      "  ],",
      "];"
    ]
  },

  // this is a placeholder so that all items above can have a trailing slash
  "": { "body": "" }
}
